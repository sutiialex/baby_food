{"version":3,"sources":["api.ts","NextFoods.tsx","AllowedFoods.tsx","Consumed.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","auth","signInAnonymously","foods","randomId","Math","random","defaultFoodState","allowedFoods","name","period","amount","unit","portion","map","f","id","consumed","setFoodState","newState","ref","set","then","foodState","onConsumeAdd","consumedReverse","reverse","sortedFoods","dateString","find","e","foodId","date","lastConsumed","Date","undefined","daysNotConsumed","floor","getTime","daysOverdue","sort","f1","f2","key","onClick","toDateString","replaceFood","food","onFoodsChanged","defaultNewFood","useState","newFood","setNewFood","handlePeriodChanged","value","parseInt","target","isNaN","handlePortionAmountChanged","handlePortionUnitChanged","onChange","type","filter","ff","disabled","c","findFoodById","App","setFoods","useEffect","callback","once","snapshot","state","val","Consumed","NextFoods","AllowedFoods","newAllowedFoods","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b91655f6.chunk.js","sourcesContent":["import {AllowedFood, FoodState, Period, Portion} from \"./model\";\n\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDZnw05t_TsI_B25nINqj7dzSkVS3ADx9Q\",\n    authDomain: \"babyfood-f264c.firebaseapp.com\",\n    databaseURL: \"https://babyfood-f264c.firebaseio.com\",\n    projectId: \"babyfood-f264c\",\n    storageBucket: \"babyfood-f264c.appspot.com\",\n    messagingSenderId: \"33974663086\",\n    appId: \"1:33974663086:web:fc8a8b6813021046c7ba3f\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst database = firebase.database();\n\nfirebase.auth().signInAnonymously();\n\nexport const randomId = () => Math.random();\n\nconst transformFoods = (foods: { name: string, period?: Period, portion?: Portion }[]): AllowedFood[] =>\n    foods.map(f => ({\n        id: randomId(),\n        name: f.name,\n        period: f.period || {amount: null, unit: \"Day\"},\n        portion: f.portion || {amount: null, unit: \"Table Spoon\"}\n    }));\n\nlet defaultFoodState: FoodState = {\n    allowedFoods: transformFoods([\n        {\n\n            name: \"Pindakaas\",\n            period: {amount: 7, unit: \"Day\" as \"Day\"},\n            portion: {amount: 7, unit: \"Table Spoon\" as \"Table Spoon\"}\n        },\n        {\n            name: \"Egg\",\n            period: {amount: 7, unit: \"Day\" as \"Day\"},\n            portion: {amount: 7, unit: \"Table Spoon\" as \"Table Spoon\"}\n        },\n        {name: \"Water\", period: {amount: 1, unit: \"Day\" as \"Day\"}},\n        {name: \"Light fruit tea\", period: {amount: 1, unit: \"Day\" as \"Day\"}},\n        {name: \"Vitamin D\", period: {amount: 1, unit: \"Day\" as \"Day\"}, portion: {amount: 10, unit: \"Drop\"}},\n        {name: \"Bread\", period: {amount: 2, unit: \"Day\" as \"Day\"}},\n        {name: \"Hrisca\"},\n        {name: \"Orez\"},\n        {name: \"Amaranth\"},\n        {name: \"Rosii\"},\n        {name: \"Castraveti\"},\n        {name: \"Peste\", period: {amount: 3, unit: \"Day\" as \"Day\"}},\n        {name: \"Carne\", period: {amount: 3, unit: \"Day\" as \"Day\"}},\n        {name: \"Dovleac\"},\n        {name: \"Dovlecel\"},\n        {name: \"Vinata\"},\n        {name: \"Mar\"},\n        {name: \"Para\"},\n        {name: \"Alac\"},\n        {name: \"Nuci\", period: {amount: 7, unit: \"Day\" as \"Day\"}},\n        {name: \"Cashew\", period: {amount: 8, unit: \"Day\" as \"Day\"}},\n        {name: \"Hazelnuts\", period: {amount: 7, unit: \"Day\" as \"Day\"}},\n        {name: \"Pecan\", period: {amount: 9, unit: \"Day\" as \"Day\"}},\n        {name: \"Fasole\", period: {amount: 9, unit: \"Day\" as \"Day\"}},\n        {name: \"Mazare\", period: {amount: 9, unit: \"Day\" as \"Day\"}},\n        {name: \"Bob\", period: {amount: 11, unit: \"Day\" as \"Day\"}},\n        {name: \"Linte\", period: {amount: 9, unit: \"Day\" as \"Day\"}},\n        {name: \"Creveti\", period: {amount: 11, unit: \"Day\" as \"Day\"}},\n        {name: \"Mango\"},\n        {name: \"Banana\"},\n        {name: \"Sparanghel\"},\n        {name: \"Andiva\"},\n        {name: \"Salata\"},\n        {name: \"Varza\"},\n        {name: \"Brocoli\"},\n        {name: \"Conopida\"},\n        {name: \"Boerenkool\"},\n        {name: \"Plaintain\"},\n        {name: \"Casava\"},\n        {name: \"Capsuni\"},\n        {name: \"Zmeura\"},\n        {name: \"Plumbs\"},\n        {name: \"Melon\"},\n        {name: \"Cottage cheese\"}\n    ]),\n    consumed: []\n\n};\nexport const getFoodState = (callback: (_: FoodState) => void) => {\n    database.ref(\"/food\").once('value').then(snapshot => {\n        const state = snapshot.val();\n        if (!state) {\n            setFoodState(defaultFoodState);\n            callback(defaultFoodState)\n        } else {\n            callback(state);\n        }\n    });\n};\n\nexport const setFoodState = (newState: FoodState) => {\n    database.ref(\"/food\").set(newState).then();\n};\n","import React from 'react';\nimport {ConsumeEvent, FoodState} from \"./model\";\n\nexport default ({foodState: {allowedFoods, consumed}, onConsumeAdd}: { foodState: FoodState, onConsumeAdd: (e: ConsumeEvent) => void }) => {\n    const consumedReverse = consumed.reverse();\n\n    const foodsWithLastConsumed = allowedFoods.map(f => {\n        const dateString: string | undefined = consumedReverse.find(e => e.foodId === f.id)?.date;\n        const date: Date | undefined = dateString ? new Date(dateString) : undefined;\n        const lastConsumed: Date = date || new Date(2020, 1, 1);\n        const daysNotConsumed = Math.floor((new Date().getTime() - lastConsumed.getTime()) / 86400000);\n        const daysOverdue = f.period.amount !== null && daysNotConsumed > f.period.amount ? daysNotConsumed - f.period.amount : undefined;\n\n        return {\n            ...f,\n            daysNotConsumed,\n            daysOverdue\n        }\n    });\n\n    const sortedFoods = foodsWithLastConsumed.sort((f1, f2) => {\n        if (f1.daysOverdue !== undefined && f2.daysOverdue !== undefined)\n            return f2.daysOverdue - f1.daysOverdue;\n        if (f1.daysOverdue !== undefined)\n            return -1;\n        if (f2.daysOverdue !== undefined)\n            return 1;\n        return f2.daysNotConsumed - f1.daysNotConsumed;\n    });\n\n    return (\n        <>\n            <h1>Next up:</h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>Food</th>\n                    <th>Days Overdue</th>\n                    <th>Days not consumed</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    sortedFoods.map(f => (<tr key={f.id}>\n                        <td>{f.name}</td>\n                        <td>{f.daysOverdue}</td>\n                        <td>{f.daysNotConsumed}</td>\n                        <td>\n                            <button onClick={() => {\n                                onConsumeAdd({foodId: f.id, date: new Date().toDateString()})\n                            }}>Consumed today\n                            </button>\n                        </td>\n                    </tr>))\n                }\n                </tbody>\n            </table>\n        </>\n    );\n}","import React, {useState} from 'react';\nimport {AllowedFood, Period, Portion, PortionUnit} from \"./model\";\nimport {randomId} from \"./api\";\n\nconst replaceFood = (foods: AllowedFood[], food: AllowedFood) => foods.map(f => f.id === food.id ? food : f);\n\ntype Props = {\n    foods: AllowedFood[],\n    onFoodsChanged: (foods: AllowedFood[]) => void\n}\n\ntype NewFoodType = { name: string | null, portion: Portion, period: Period };\n\nexport default ({foods, onFoodsChanged}: Props) => {\n    const defaultNewFood: NewFoodType = {\n        name: null,\n        portion: {amount: null, unit: \"Table Spoon\"},\n        period: {amount: null, unit: \"Day\"}\n    };\n    const [newFood, setNewFood] = useState<NewFoodType>(defaultNewFood);\n\n    const handleNameChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const name = e.target.value;\n        if (name !== food.name)\n            onFoodsChanged(replaceFood(foods, {...food, name: name}));\n    };\n\n    const handlePeriodChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const value = parseInt(e.target.value);\n        if (value !== food.period?.amount)\n            onFoodsChanged(replaceFood(foods, isNaN(value) ? {\n                ...food,\n                period: {...food.period, amount: null}\n            } : {\n                ...food,\n                period: {amount: value, unit: \"Day\"}\n            }));\n    };\n\n    const handlePortionAmountChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const value = parseInt(e.target.value);\n        if (value !== food.portion?.amount)\n            onFoodsChanged(replaceFood(foods, isNaN(value) ? {...food, portion: {...food.portion, amount: null}} : {\n                ...food, portion: {\n                    amount: value, unit: food.portion?.unit || \"Table Spoon\"\n                }\n            }));\n    };\n\n    const handlePortionUnitChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const value: PortionUnit = e.target.value as PortionUnit;\n        if (value !== food.portion?.unit)\n            onFoodsChanged(replaceFood(foods, {...food, portion: {amount: null, unit: value}}));\n    };\n\n    return (\n        <>\n            <h1>\n                Allowed Foods\n            </h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>Food</th>\n                    <th>Period</th>\n                    <th>Portion</th>\n                </tr>\n                </thead>\n                <tbody>\n                {foods.map(f => (\n                    <tr key={f.id}>\n                        <td>\n                            <input onChange={handleNameChanged(f)} value={f.name}/>\n                        </td>\n                        <td>\n                            <input type=\"number\" onChange={handlePeriodChanged(f)}\n                                   value={f.period.amount || undefined}/>days\n                        </td>\n                        <td>\n                            <input type=\"number\" onChange={handlePortionAmountChanged(f)}\n                                   value={f.portion.amount || undefined}/>\n                            <select onChange={handlePortionUnitChanged(f)} value={f.portion?.unit}>\n                                <option value=\"Table Spoon\">Table Spoon</option>\n                                <option value=\"Tea Spoon\">Tea Spoon</option>\n                                <option value=\"Drop\">Drop</option>\n                                <option value=\"Glass\">Glass</option>\n                            </select>\n                        </td>\n                        <td>\n                            <button onClick={() => onFoodsChanged(foods.filter(ff => ff.name !== f.name))}>\n                                Delete\n                            </button>\n                        </td>\n                    </tr>))}\n                <tr>\n                    <td>\n                        <input onChange={e => setNewFood({...newFood, name: e.target.value})}\n                               value={newFood.name || undefined}/>\n                    </td>\n                    <td>\n                        <input type=\"number\" onChange={(e) => setNewFood({\n                            ...newFood,\n                            period: {amount: parseInt(e.target.value), unit: \"Day\"}\n                        })} value={newFood.period.amount || undefined}/>days\n                    </td>\n                    <td>\n                        <input type=\"number\" onChange={(e) => setNewFood({\n                            ...newFood,\n                            portion: {amount: parseInt(e.target.value), unit: \"Table Spoon\"}\n                        })} value={newFood.portion?.amount || undefined}/>\n                        <select onChange={(e) => setNewFood({\n                            ...newFood,\n                            portion: {amount: newFood.portion?.amount || null, unit: e.target.value as PortionUnit}\n                        })} value={newFood.portion?.unit}>\n                            <option value=\"Table Spoon\">Table Spoon</option>\n                            <option value=\"Tea Spoon\">Tea Spoon</option>\n                            <option value=\"Drop\">Drop</option>\n                            <option value=\"Glass\">Glass</option>\n                        </select>\n                    </td>\n                    <td>\n                        <button disabled={newFood.name === undefined}\n                                onClick={() => {\n                                    const name = newFood.name;\n                                    if (name) {\n                                        onFoodsChanged([...foods, {\n                                            id: randomId(),\n                                            name: name,\n                                            period: newFood.period, portion: newFood.portion\n                                        }]);\n                                    }\n                                    setNewFood(defaultNewFood);\n                                }}>\n                            Add\n                        </button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </>\n    );\n}","import React from 'react';\nimport {FoodId, FoodState} from \"./model\";\n\nexport default ({foodState: {consumed, allowedFoods}}: { foodState: FoodState }) => {\n    const findFoodById = (foodId: FoodId) => allowedFoods.find(f => f.id === foodId)?.name;\n\n    return (\n        <>\n            <h1>Consumed:</h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>Food</th>\n                    <th>Date</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    consumed.reverse().map(c => (<tr key={c.date + c.foodId}>\n                        <td>{findFoodById(c.foodId)}</td>\n                        <td>{c.date}</td>\n                    </tr>))\n                }\n                </tbody>\n            </table>\n        </>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {getFoodState, setFoodState} from \"./api\";\nimport NextFoods from \"./NextFoods\";\nimport AllowedFoods from \"./AllowedFoods\";\nimport {AllowedFood, ConsumeEvent, FoodState} from \"./model\";\nimport Consumed from \"./Consumed\";\n\nfunction App() {\n    const [foods, setFoods] = useState<FoodState | undefined>();\n\n    useEffect(() => {\n        getFoodState(setFoods);\n    }, []);\n\n    useEffect(() => {\n        if (foods)\n            setFoodState(foods);\n    }, [foods]);\n\n    if (foods === undefined)\n        return <div>Loading...</div>;\n\n    return (\n        <>\n            <Consumed foodState={foods}/>\n            <NextFoods foodState={foods}\n                       onConsumeAdd={(e: ConsumeEvent) => setFoods({...foods, consumed: [...foods?.consumed, e]})}/>\n            <AllowedFoods foods={foods.allowedFoods} onFoodsChanged={(newAllowedFoods: AllowedFood[]) => {\n                setFoods({...foods, allowedFoods: newAllowedFoods});\n            }}/>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}