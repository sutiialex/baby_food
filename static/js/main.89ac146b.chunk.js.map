{"version":3,"sources":["api.ts","NextFoods.tsx","AllowedFoods.tsx","Consumed.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomId","Math","random","foodState","allowedFoods","id","name","period","amount","unit","portion","consumed","onConsumeAdd","consumedReverse","reverse","sortedFoods","map","f","lastConsumed","find","e","foodId","date","Date","daysNotConsumed","floor","getTime","daysOverdue","undefined","sort","f1","f2","key","onClick","replaceFood","foods","food","onFoodsChanged","useState","newFood","setNewFood","handlePeriodChanged","value","parseInt","target","handlePortionAmountChanged","handlePortionUnitChanged","onChange","type","filter","ff","disabled","c","toDateString","findFoodById","App","setFoods","useEffect","Consumed","NextFoods","AllowedFoods","newAllowedFoods","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89ac146b.chunk.js","sourcesContent":["import {FoodState} from \"./model\";\n\n\nexport const randomId = () => Math.random();\n\nlet foodState: FoodState = {\n    allowedFoods: [\n        {\n            id: randomId(),\n            name: \"Pindakaas\",\n            period: {amount: 7, unit: \"Day\"},\n            portion: {amount: 7, unit: \"Table Spoon\"}\n        },\n        {id: randomId(), name: \"Egg\", period: {amount: 7, unit: \"Day\"}, portion: {amount: 7, unit: \"Table Spoon\"}},\n        {id: randomId(), name: \"Water\", period: {amount: 1, unit: \"Day\"}},\n        {id: randomId(), name: \"Light fruit tea\", period: {amount: 1, unit: \"Day\"}},\n        {id: randomId(), name: \"Vitamin D\", period: {amount: 1, unit: \"Day\"}, portion: {amount: 10, unit: \"Drop\"}},\n        {id: randomId(), name: \"Bread\", period: {amount: 2, unit: \"Day\"}},\n        {id: randomId(), name: \"Hrisca\"},\n        {id: randomId(), name: \"Orez\"},\n        {id: randomId(), name: \"Amaranth\"},\n        {id: randomId(), name: \"Rosii\"},\n        {id: randomId(), name: \"Castraveti\"},\n        {id: randomId(), name: \"Peste\", period: {amount: 3, unit: \"Day\"}},\n        {id: randomId(), name: \"Carne\", period: {amount: 3, unit: \"Day\"}},\n        {id: randomId(), name: \"Dovleac\"},\n        {id: randomId(), name: \"Dovlecel\"},\n        {id: randomId(), name: \"Vinata\"},\n        {id: randomId(), name: \"Mar\"},\n        {id: randomId(), name: \"Para\"},\n        {id: randomId(), name: \"Alac\"},\n        {id: randomId(), name: \"Nuci\", period: {amount: 7, unit: \"Day\"}},\n        {id: randomId(), name: \"Cashew\", period: {amount: 8, unit: \"Day\"}},\n        {id: randomId(), name: \"Hazelnuts\", period: {amount: 7, unit: \"Day\"}},\n        {id: randomId(), name: \"Pecan\", period: {amount: 9, unit: \"Day\"}},\n        {id: randomId(), name: \"Fasole\", period: {amount: 9, unit: \"Day\"}},\n        {id: randomId(), name: \"Mazare\", period: {amount: 9, unit: \"Day\"}},\n        {id: randomId(), name: \"Bob\", period: {amount: 11, unit: \"Day\"}},\n        {id: randomId(), name: \"Linte\", period: {amount: 9, unit: \"Day\"}},\n        {id: randomId(), name: \"Creveti\", period: {amount: 11, unit: \"Day\"}},\n        {id: randomId(), name: \"Mango\"},\n        {id: randomId(), name: \"Banana\"},\n        {id: randomId(), name: \"Sparanghel\"},\n        {id: randomId(), name: \"Andiva\"},\n        {id: randomId(), name: \"Salata\"},\n        {id: randomId(), name: \"Varza\"},\n        {id: randomId(), name: \"Brocoli\"},\n        {id: randomId(), name: \"Conopida\"},\n        {id: randomId(), name: \"Boerenkool\"},\n        {id: randomId(), name: \"Plaintain\"},\n        {id: randomId(), name: \"Casava\"},\n        {id: randomId(), name: \"Capsuni\"},\n        {id: randomId(), name: \"Zmeura\"},\n        {id: randomId(), name: \"Plumbs\"},\n        {id: randomId(), name: \"Melon\"},\n        {id: randomId(), name: \"Cottage cheese\"}\n    ],\n    consumed: []\n\n};\nexport const getFoodState = () => foodState;\n\nexport const setFoodState = (newState: FoodState) => {\n    foodState = newState;\n};\n","import React from 'react';\nimport {ConsumeEvent, FoodState} from \"./model\";\n\nexport default ({foodState: {allowedFoods, consumed}, onConsumeAdd}: { foodState: FoodState, onConsumeAdd: (e: ConsumeEvent) => void }) => {\n    const consumedReverse = consumed.reverse();\n\n    const foodsWithLastConsumed = allowedFoods.map(f => {\n        const lastConsumed: Date = consumedReverse.find(e => e.foodId === f.id)?.date || new Date(2020, 1, 1);\n        const daysNotConsumed = Math.floor((new Date().getTime() - lastConsumed.getTime()) / 86400000);\n        const daysOverdue = f.period !== undefined && daysNotConsumed > f.period.amount ? daysNotConsumed - f.period.amount : undefined;\n\n        return {\n            ...f,\n            daysNotConsumed,\n            daysOverdue\n        }\n    });\n\n    const sortedFoods = foodsWithLastConsumed.sort((f1, f2) => {\n        if (f1.daysOverdue !== undefined && f2.daysOverdue !== undefined)\n            return f2.daysOverdue - f1.daysOverdue;\n        if (f1.daysOverdue !== undefined)\n            return -1;\n        if (f2.daysOverdue !== undefined)\n            return 1;\n        return f2.daysNotConsumed - f1.daysNotConsumed;\n    });\n\n    return (\n        <>\n            <h1>Next up:</h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>Food</th>\n                    <th>Days Overdue</th>\n                    <th>Days not consumed</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    sortedFoods.map(f => (<tr key={f.id}>\n                        <td>{f.name}</td>\n                        <td>{f.daysOverdue}</td>\n                        <td>{f.daysNotConsumed}</td>\n                        <td>\n                            <button onClick={() => {\n                                onConsumeAdd({foodId: f.id, date: new Date()})\n                            }}>Consumed today\n                            </button>\n                        </td>\n                    </tr>))\n                }\n                </tbody>\n            </table>\n        </>\n    );\n}","import React, {useState} from 'react';\nimport {AllowedFood, PortionUnit} from \"./model\";\nimport {randomId} from \"./api\";\n\nconst replaceFood = (foods: AllowedFood[], food: AllowedFood) => foods.map(f => f.id === food.id ? food : f);\n\ntype Props = {\n    foods: AllowedFood[],\n    onFoodsChanged: (foods: AllowedFood[]) => void\n}\n\nexport default ({foods, onFoodsChanged}: Props) => {\n    const [newFood, setNewFood] = useState<Partial<AllowedFood>>({});\n\n    const handleNameChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const name = e.target.value;\n        if (name !== food.name)\n            onFoodsChanged(replaceFood(foods, {...food, name: name}));\n    };\n\n    const handlePeriodChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const value = parseInt(e.target.value);\n        if (value !== food.period?.amount)\n            onFoodsChanged(replaceFood(foods, {...food, period: {amount: value, unit: \"Day\"}}));\n    };\n\n    const handlePortionAmountChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const value = parseInt(e.target.value);\n        if (value !== food.portion?.amount)\n            onFoodsChanged(replaceFood(foods, {\n                ...food, portion: {\n                    amount: value, unit: food.portion?.unit || \"Table Spoon\"\n                }\n            }));\n    };\n\n    const handlePortionUnitChanged = (food: AllowedFood) => (e: { target: { value: string } }) => {\n        const value: PortionUnit = e.target.value as PortionUnit;\n        if (value !== food.portion?.unit)\n            onFoodsChanged(replaceFood(foods, {...food, portion: {amount: undefined, unit: value}}));\n    };\n\n    return (\n        <>\n            <h1>\n                Allowed Foods\n            </h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>Food</th>\n                    <th>Period</th>\n                    <th>Portion</th>\n                </tr>\n                </thead>\n                <tbody>\n                {foods.map(f => (\n                    <tr key={f.id}>\n                        <td>\n                            <input onChange={handleNameChanged(f)} value={f.name}/>\n                        </td>\n                        <td>\n                            <input type=\"number\" onChange={handlePeriodChanged(f)} value={f.period?.amount}/>days\n                        </td>\n                        <td>\n                            <input type=\"number\" onChange={handlePortionAmountChanged(f)} value={f.portion?.amount}/>\n                            <select onChange={handlePortionUnitChanged(f)} value={f.portion?.unit}>\n                                <option value=\"Table Spoon\">Table Spoon</option>\n                                <option value=\"Tea Spoon\">Tea Spoon</option>\n                                <option value=\"Drop\">Drop</option>\n                                <option value=\"Glass\">Glass</option>\n                            </select>\n                        </td>\n                        <td>\n                            <button onClick={() => onFoodsChanged(foods.filter(ff => ff.name !== f.name))}>\n                                Delete\n                            </button>\n                        </td>\n                    </tr>))}\n                <tr>\n                    <td>\n                        <input onChange={e => setNewFood({...newFood, name: e.target.value})} value={newFood.name}/>\n                    </td>\n                    <td>\n                        <input type=\"number\" onChange={(e) => setNewFood({\n                            ...newFood,\n                            period: {amount: parseInt(e.target.value), unit: \"Day\"}\n                        })} value={newFood.period?.amount}/>days\n                    </td>\n                    <td>\n                        <input type=\"number\" onChange={(e) => setNewFood({\n                            ...newFood,\n                            portion: {amount: parseInt(e.target.value), unit: \"Table Spoon\"}\n                        })} value={newFood.portion?.amount}/>\n                        <select onChange={(e) => setNewFood({\n                            ...newFood,\n                            portion: {...newFood.portion, unit: e.target.value as PortionUnit}\n                        })} value={newFood.portion?.unit}>\n                            <option value=\"Table Spoon\">Table Spoon</option>\n                            <option value=\"Tea Spoon\">Tea Spoon</option>\n                            <option value=\"Drop\">Drop</option>\n                            <option value=\"Glass\">Glass</option>\n                        </select>\n                    </td>\n                    <td>\n                        <button disabled={newFood.name === undefined}\n                                onClick={() => {\n                                    const name = newFood.name;\n                                    if (name !== undefined) {\n                                        onFoodsChanged([...foods, {...newFood, id: randomId(), name: name}]);\n                                    }\n                                    setNewFood({});\n                                }}>\n                            Add\n                        </button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </>\n    );\n}","import React from 'react';\nimport {FoodId, FoodState} from \"./model\";\n\nexport default ({foodState: {consumed, allowedFoods}}: { foodState: FoodState }) => {\n    const findFoodById = (foodId: FoodId) => allowedFoods.find(f => f.id === foodId)?.name;\n\n    return (\n        <>\n            <h1>Consumed:</h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>Food</th>\n                    <th>Date</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    consumed.reverse().map(c => (<tr key={c.date.toDateString() + c.foodId}>\n                        <td>{findFoodById(c.foodId)}</td>\n                        <td>{c.date.toDateString()}</td>\n                    </tr>))\n                }\n                </tbody>\n            </table>\n        </>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {getFoodState, setFoodState} from \"./api\";\nimport NextFoods from \"./NextFoods\";\nimport AllowedFoods from \"./AllowedFoods\";\nimport {AllowedFood, ConsumeEvent, FoodState} from \"./model\";\nimport Consumed from \"./Consumed\";\n\nfunction App() {\n    const [foods, setFoods] = useState<FoodState | undefined>();\n\n    useEffect(() => {\n        setFoods(getFoodState());\n    }, []);\n\n    useEffect(() => {\n        if (foods)\n            setFoodState(foods);\n    }, [foods]);\n\n    if (foods === undefined)\n        return <div>Loading...</div>;\n\n    return (\n        <>\n            <Consumed foodState={foods}/>\n            <NextFoods foodState={foods}\n                       onConsumeAdd={(e: ConsumeEvent) => setFoods({...foods, consumed: [...foods?.consumed, e]})}/>\n            <AllowedFoods foods={foods.allowedFoods} onFoodsChanged={(newAllowedFoods: AllowedFood[]) => {\n                setFoods({...foods, allowedFoods: newAllowedFoods});\n            }}/>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}